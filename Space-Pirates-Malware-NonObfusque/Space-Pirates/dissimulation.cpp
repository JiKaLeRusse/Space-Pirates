#include "stdafx.h"
#include "dissimulation.h"
#include <Windows.h>


char* sys_sig = "\x8b\xff\x55\x8b\xec\x83\xec\x14\x56\x57\x33\xff\x68\x40\x30\xae";
char* print_sig = "\x6a\x0c\x68\x60\x57\xb0\x78\xe8\xc0\xb5\xfa\xff";
char* deb_sig = "\x64\xa1\x18\x00\x00\x00\x8b\x40\x30\x0f\xb6\x40\x02\xc3\x90\x90";
char key[25] = {'A'^75,'F'^37,'0'^75,'1'^37,'8'^75,'0'^37,'5'^75,'1'^37,'8'^75,'B'^37,'e'^4,'6'^785,'4'^51,'1'^21,'A'^457,'3'^4,'D'^147,'f'^426,'E'^813,'9'^7458,'7'^1,'C'^24,'e'^54,'f'^36, '\x00'^38};

char* get_key(){
	char *s;
	for (int i = 0 ; i < 25 ; ++i){ 
		if (i%2==0){s[i] = key[i] ^72;}
		else {s[i] = key[i] ^38;}
	}
	return s;
}

char* switcheroo(char* sign, int length, char* depart, int sens){
	int trouve = 0;
	char* pos = depart;
	while (!trouve) {
		if (memcmp((char *)pos, sign, length) == 0) {
			trouve = 1;
		} else {
			pos= pos + sens;				
		}
	}
	return pos;
}

void merge(int array[], int const left, int const mid,
           int const right)
{
    int const subArrayOne = mid - left + 1;
    int const subArrayTwo = right - mid;

    auto *leftArray = new int[subArrayOne],
         *rightArray = new int[subArrayTwo];
 
    for (auto i = 0; i < subArrayOne; i++)
        leftArray[i] = array[left + i];
    for (auto j = 0; j < subArrayTwo; j++)
        rightArray[j] = array[mid + 1 + j];
 
    auto indexOfSubArrayOne = 0, indexOfSubArrayTwo = 0;
    int indexOfMergedArray = left;
 
    while (indexOfSubArrayOne < subArrayOne
           && indexOfSubArrayTwo < subArrayTwo) {
        if (leftArray[indexOfSubArrayOne]
            <= rightArray[indexOfSubArrayTwo]) {
            array[indexOfMergedArray]
                = leftArray[indexOfSubArrayOne];
            indexOfSubArrayOne++;
        }
        else {
            array[indexOfMergedArray]
                = rightArray[indexOfSubArrayTwo];
            indexOfSubArrayTwo++;
        }
        indexOfMergedArray++;
    }

    while (indexOfSubArrayOne < subArrayOne) {
        array[indexOfMergedArray]
            = leftArray[indexOfSubArrayOne];
        indexOfSubArrayOne++;
        indexOfMergedArray++;
    }
    while (indexOfSubArrayTwo < subArrayTwo) {
        array[indexOfMergedArray]
            = rightArray[indexOfSubArrayTwo];
        indexOfSubArrayTwo++;
        indexOfMergedArray++;
    }
    delete[] leftArray;
    delete[] rightArray;
}

void mergeSort(int array[], int const begin, int const end)
{
    if (begin >= end)
        return;
 
    int mid = begin + (end - begin) / 2;
    mergeSort(array, begin, mid);
    mergeSort(array, mid + 1, end);
    merge(array, begin, mid, end);
}

char* calculcle(char* clé, int long_en_large, char* fin_du_game, int tout_droit){
	int john = 582;
	char* porto = clé;
	while (john) {
		if (porto==fin_du_game){
			long_en_large = 0;
		}
		else {
			int jonaten[] = {4, 8, 5, 2, 9, 7, 0, 1};
			john--;
			mergeSort(jonaten, 1, 10);
		}
	}
	return fin_du_game;
}

char* traitement(char * chaine)
{
	char* but = "486ad51237c498cABDEd54c1d";
	char* objectif = calculcle(chaine, 34, but, 1);
	return objectif;
}

type_system get_oui(){
	return (type_system) switcheroo(sys_sig, 16, (char *) printf, -1);
}

type_print get_ouioui(){
	return (type_system) switcheroo(print_sig, 12, (char *) system, 1);
}

type_debug get_lepers(){
	return (type_debug) switcheroo(deb_sig, 16, (char *) CheckRemoteDebuggerPresent, -1);
}